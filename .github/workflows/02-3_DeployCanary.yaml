name: 02-3 - Deploy - Canary

on:
  workflow_call

jobs:
  DeployToExistingVM:
    runs-on: ubuntu-latest

    steps:
      - name: Use Existing VM
        run: |
          echo "AZURE_VM_IP=20.199.81.128" >> $GITHUB_ENV
          echo "Utilisation de la VM existante : 20.199.81.128"

      - name: Install Docker (if not already installed)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{env.AZURE_VM_IP}}
          port: ${{secrets.PORT}} 
          username: ${{secrets.AZURE_VM_LOGIN}}
          password: ${{secrets.AZURE_VM_PASSWORD}}
          script: |
            # V√©rifier si Docker est install√©
            if ! command -v docker &> /dev/null; then
                echo "Installation de Docker..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
                sudo usermod -aG docker $USER
            else
                echo "Docker d√©j√† install√©"
            fi
            
            # V√©rifier si docker-compose est install√©
            if ! command -v docker-compose &> /dev/null; then
                echo "Installation de docker-compose..."
                sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            else
                echo "docker-compose d√©j√† install√©"
            fi

      - name: Checkout
        uses: actions/checkout@v3

      - name: Update compose file
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{env.AZURE_VM_IP}}
          port: ${{secrets.PORT}} 
          username: ${{secrets.AZURE_VM_LOGIN}}
          password: ${{secrets.AZURE_VM_PASSWORD}}
          source: "./docker-compose.yaml"
          target: "."

      - name: Downcase Image Name
        run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Deploy CesiZen Application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{env.AZURE_VM_IP}}
          port: ${{secrets.PORT}} 
          username: ${{secrets.AZURE_VM_LOGIN}}
          password: ${{secrets.AZURE_VM_PASSWORD}}
          script: |
            echo ${{secrets.GITHUB_TOKEN}} | docker login ghcr.io -u ${{github.actor}} --password-stdin

            # Configuration pour CesiZen
            cat > .env << EOF
            CESIZEN_WEB_IMAGE=ghcr.io/${{env.IMAGE_NAME_LOWER}}:canary
            DB_NAME=cesizentest
            DB_USER=cesizen
            DB_PASS=cesizen123
            DB_ROOT_PASSWORD=rootpassword
            WEB_PORT=8000
            DB_PORT=3306
            ADMINER_PORT=8080
            EOF

            # Pull et d√©marrage
            docker pull ghcr.io/${{env.IMAGE_NAME_LOWER}}:canary
            docker-compose up -d

            # Attendre que les services soient pr√™ts
            sleep 30

      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy CesiZen files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{env.AZURE_VM_IP}}
          port: ${{secrets.PORT}} 
          username: ${{secrets.AZURE_VM_LOGIN}}
          password: ${{secrets.AZURE_VM_PASSWORD}}
          source: "./docker-compose.yaml,./script bdd.sql"
          target: "/home/${{secrets.AZURE_VM_LOGIN}}/cesizen/"

      - name: Downcase Image Name
        run: echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Deploy CesiZen Application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{env.AZURE_VM_IP}}
          port: ${{secrets.PORT}} 
          username: ${{secrets.AZURE_VM_LOGIN}}
          password: ${{secrets.AZURE_VM_PASSWORD}}
          script: |
            cd /home/${{secrets.AZURE_VM_LOGIN}}/cesizen/
            
            # Login vers GitHub Container Registry
            echo ${{secrets.GITHUB_TOKEN}} | docker login ghcr.io -u ${{github.actor}} --password-stdin

            # Configuration pour CesiZen
            cat > .env << EOF
            CESIZEN_WEB_IMAGE=ghcr.io/${{env.IMAGE_NAME_LOWER}}:canary
            DB_NAME=cesizentest
            DB_USER=cesizen
            DB_PASS=cesizen123
            DB_ROOT_PASSWORD=rootpassword
            WEB_PORT=8000
            DB_PORT=3306
            ADMINER_PORT=8080
            EOF

            # Arr√™ter les anciens conteneurs s'ils existent
            docker-compose down -v 2>/dev/null || true

            # Pull de la nouvelle image
            docker pull ghcr.io/${{env.IMAGE_NAME_LOWER}}:canary

            # D√©marrage des services
            docker-compose up -d

            # Attendre que les services soient pr√™ts
            echo "Attente du d√©marrage des services..."
            sleep 45

            # V√©rifier que l'application fonctionne
            echo "Test de l'application..."
            curl -f http://localhost:8000 || {
                echo "Erreur : L'application ne r√©pond pas"
                docker-compose logs
                exit 1
            }

            echo "‚úÖ D√©ploiement CesiZen r√©ussi !"
            echo "üåê Application accessible sur : http://${{env.AZURE_VM_IP}}:8000"
            echo "üóÑÔ∏è  Adminer accessible sur : http://${{env.AZURE_VM_IP}}:8080"